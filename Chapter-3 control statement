
#Control of flow


Control of flow refers to the process of directing the execution of a program based on certain conditions or criteria. This allows the program to make decisions and perform different actions based on the input or data it receives.

In Python, there are several ways to control the flow of a program, including:

1. Conditional statements: These statements allow the program to execute different code blocks depending on whether a certain condition is true or false. The most commonly used conditional statements in Python are `if`, `elif`, and `else`.

```python
x = 10
if x > 5:
    print("x is greater than 5")
elif x == 5:
    print("x is equal to 5")
else:
    print("x is less than 5")
```

2. Loops: Loops allow the program to repeat a certain block of code multiple times. There are two types of loops in Python: `for` loops and `while` loops.

```python
# For loop
for i in range(5):
    print(i)

# While loop
i = 0
while i < 5:
    print(i)
    i += 1
```

3. Break and continue statements: These statements allow the program to modify the behavior of loops. The `break` statement terminates the loop prematurely, while the `continue` statement skips over a certain iteration of the loop.

```python
# Break statement
for i in range(10):
    if i == 5:
        break
    print(i)

# Continue statement
for i in range(10):
    if i % 2 == 0:
        continue
    print(i)
```

By using these control flow tools, programmers can create more sophisticated programs that can make decisions and perform different actions based on various inputs or conditions.




#Basic structure in programming language


In programming language, the basic structure includes:

1. Comments: These are notes that programmers add to their code to explain what it does or how it works. Comments are not executed by the program and are only there for human readability.

```python
# This is a comment in Python
```

2. Variables: These are containers that hold values that can be used in the program. Variables can be assigned different data types such as integers, floats, strings, and booleans.

```python
x = 10       # integer variable
y = 3.14     # float variable
name = "John"   # string variable
is_true = True  # boolean variable
```

3. Data types: These are the different types of values that can be stored in variables. The most common data types include integers, floats, strings, and booleans.

```python
x = 10       # integer data type
y = 3.14     # float data type
name = "John"   # string data type
is_true = True  # boolean data type
```

4. Operators: These are symbols or keywords that perform operations on variables and values. Common operators include arithmetic operators (+, -, *, /), comparison operators (==, !=, <, >), and logical operators (and, or, not).

```python
# Arithmetic operators
x = 10 + 5    # addition operator
y = 10 - 5    # subtraction operator
z = 10 * 5    # multiplication operator
w = 10 / 5    # division operator

# Comparison operators
a = 10 == 5   # equal to operator
b = 10 != 5   # not equal to operator
c = 10 < 5    # less than operator
d = 10 > 5    # greater than operator

# Logical operators
e = True and False  # and operator
f = True or False   # or operator
g = not True        # not operator
```

5. Functions: These are reusable blocks of code that perform a specific task. Functions can take in input values called parameters, and can return output values.

```python
def add_numbers(x, y):
    sum = x + y
    return sum

result = add_numbers(10, 5)
print(result)   # output: 15
```

By understanding and using these basic structures, programmers can create more complex programs that can perform different tasks and solve problems.





#Conditional or selection statements


6. Conditional statements: These are statements that allow the program to make decisions based on certain conditions. The most common conditional statements include if, elif, and else.

```python
x = 10
if x > 5:
    print("x is greater than 5")
elif x == 5:
    print("x is equal to 5")
else:
    print("x is less than 5")
```

In this example, the program checks if x is greater than 5. If it is, it prints "x is greater than 5". If x is equal to 5, it prints "x is equal to 5". If neither condition is true, it prints "x is less than 5".

7. Loops: These are structures that allow the program to repeat a set of instructions multiple times. The most common loops include for and while loops.

```python
# For loop
for i in range(1, 6):
    print(i)

# Output: 
# 1
# 2
# 3
# 4
# 5

# While loop
x = 0
while x < 5:
    print(x)
    x += 1

# Output:
# 0
# 1
# 2
# 3
# 4
```

In the for loop example, the program prints the numbers from 1 to 5. In the while loop example, the program prints the numbers from 0 to 4 by using a counter variable that increments by 1 each time the loop runs.





#The one-way if statement


The one-way if statement is a conditional statement that only executes a block of code if the condition is true. It does not have an else or elif clause. 

```python
x = 10
if x > 5:
    print("x is greater than 5")
```

In this example, the program checks if x is greater than 5. If it is, it prints "x is greater than 5". If not, it simply moves on to the next line of code without doing anything. This is useful when we only want to execute a block of code under a specific condition and do nothing otherwise.




#Two-way if-else statement


The two-way if-else statement is a conditional statement that executes one block of code if the condition is true and another block of code if the condition is false. 

```python
x = 3
if x > 5:
    print("x is greater than 5")
else:
    print("x is less than or equal to 5")
```

In this example, the program checks if x is greater than 5. If it is, it prints "x is greater than 5". If not, it prints "x is less than or equal to 5". This is useful when we want to execute different blocks of code depending on whether a condition is true or false.



#The multi-way if-else statement


The multi-way if-else statement is a conditional statement that allows us to test multiple conditions and execute different blocks of code based on the results. It uses the elif keyword to add additional conditions to the if-else statement.

```python
x = 3
if x > 5:
    print("x is greater than 5")
elif x == 5:
    print("x is equal to 5")
else:
    print("x is less than 5")
```

In this example, the program first checks if x is greater than 5. If it is, it prints "x is greater than 5". If not, it checks if x is equal to 5. If it is, it prints "x is equal to 5". If neither of these conditions are true, it prints "x is less than 5". This allows us to test multiple conditions and execute different blocks of code based on the results.



#Nested if statement


A nested if statement is an if statement that is contained within another if statement. It allows us to test additional conditions based on the results of the outer if statement.

```python
x = 10
if x > 5:
    print("x is greater than 5")
    if x == 10:
        print("x is equal to 10")
else:
    print("x is less than or equal to 5")
```

In this example, the program first checks if x is greater than 5. If it is, it prints "x is greater than 5" and then checks if x is equal to 10. If it is, it prints "x is equal to 10". If x is not greater than 5, it prints "x is less than or equal to 5". This allows us to test multiple conditions and execute different blocks of code based on the results of both the outer and inner if statements.
